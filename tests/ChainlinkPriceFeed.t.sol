// SPDX-License-Identifier: MIT
pragma solidity >=0.8.28;

import "forge-std/src/Test.sol";
import "../src/ChainlinkPriceFeed.sol";
import "../tests/mocks/MockChainlinkVerifier.sol";

contract ChainlinkPriceFeedTest is Test {
    ChainlinkPriceFeed public priceFeed;
    MockChainlinkVerifier public verifier;

    address constant PAIR_TOKEN_ADDRESS = address(0x1);
    address constant USDC_TOKEN_ADDRESS = address(0x2);
    bytes32 constant FEED_ID = 0x0003d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d6;
    string constant PAIR_NAME = "SOL/USD";

    function setUp() public {
        verifier = new MockChainlinkVerifier();
        priceFeed = new ChainlinkPriceFeed(
            PAIR_TOKEN_ADDRESS, USDC_TOKEN_ADDRESS, payable(address(verifier)), FEED_ID, PAIR_NAME
        );
    }

    function testUpdatePriceData() public {
        bytes memory verifyReportRequest =
            hex"00094bdfff2836d6533428dd204f5864470dc055e6bdd01f34502fe890d5ed260000000000000000000000000000000000000000000000000000000000e30d9b000000000000000000000000000000000000000000000000000000030000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200003d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d60000000000000000000000000000000000000000000000000000000067eab4250000000000000000000000000000000000000000000000000000000067eab42500000000000000000000000000000000000000000000000000009dc652bd7d3a000000000000000000000000000000000000000000000000005343cbec9a4d7a0000000000000000000000000000000000000000000000000000000068124125000000000000000000000000000000000000000000000006eaa8bf1b08dc1460000000000000000000000000000000000000000000000006ea83c3d7a2e76000000000000000000000000000000000000000000000000006eabc5ed13c592120000000000000000000000000000000000000000000000000000000000000000231dc8e067fe132b3e5db13ad0afe12a32e4f352138ffc62ec0072fbba8a7968a0d029883ec68233ae9fcb3420d265f08dae4de62e7d2b2a3bcc08eb191b8bdd8000000000000000000000000000000000000000000000000000000000000000208cddadced054eccf7752c3be44d35b84a19dcaacf4a08ad55faeebb570ca88f25958fe41290ba0fa456cd24bac9f7168c6ed2c32b8f6c28b77f4dfeba5ba4d8";
        bytes memory parameterPayload = "";

        // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_744_415_339);

        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);

        // Fetch the current price
        (, int256 answer,,,) = priceFeed.latestRoundData();
        // 138.12
        assertEq(answer, 138_121_629_721_886_300_000);
    }

    function testInvalidFeedId() public {
        bytes memory verifyReportRequest =
            hex"00094bdfff2836d6533428dd204f5864470dc055e6bdd01f34502fe890d5ed260000000000000000000000000000000000000000000000000000000000e30d9b000000000000000000000000000000000000000000000000000000030000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200003d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d60000000000000000000000000000000000000000000000000000000067eab4250000000000000000000000000000000000000000000000000000000067eab42500000000000000000000000000000000000000000000000000009dc652bd7d3a000000000000000000000000000000000000000000000000005343cbec9a4d7a0000000000000000000000000000000000000000000000000000000068124125000000000000000000000000000000000000000000000006eaa8bf1b08dc1460000000000000000000000000000000000000000000000006ea83c3d7a2e76000000000000000000000000000000000000000000000000006eabc5ed13c592120000000000000000000000000000000000000000000000000000000000000000231dc8e067fe132b3e5db13ad0afe12a32e4f352138ffc62ec0072fbba8a7968a0d029883ec68233ae9fcb3420d265f08dae4de62e7d2b2a3bcc08eb191b8bdd8000000000000000000000000000000000000000000000000000000000000000208cddadced054eccf7752c3be44d35b84a19dcaacf4a08ad55faeebb570ca88f25958fe41290ba0fa456cd24bac9f7168c6ed2c32b8f6c28b77f4dfeba5ba4d8";
        bytes memory parameterPayload = "";

        bytes32 invalidFeedId = 0x1103d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d6;

        ChainlinkPriceFeed invalidPriceFeedId = new ChainlinkPriceFeed(
            PAIR_TOKEN_ADDRESS, USDC_TOKEN_ADDRESS, payable(address(verifier)), invalidFeedId, PAIR_NAME
        );

        // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_744_415_339);

        // Expect revert due to feed ID mismatch
        vm.expectRevert(ChainlinkPriceFeed.FeedIdMismatch.selector);
        invalidPriceFeedId.updatePriceData(verifyReportRequest, parameterPayload);
    }

    function testExpiredData() public {
        bytes memory verifyReportRequest =
            hex"00094bdfff2836d6533428dd204f5864470dc055e6bdd01f34502fe890d5ed260000000000000000000000000000000000000000000000000000000000e30d9b000000000000000000000000000000000000000000000000000000030000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200003d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d60000000000000000000000000000000000000000000000000000000067eab4250000000000000000000000000000000000000000000000000000000067eab42500000000000000000000000000000000000000000000000000009dc652bd7d3a000000000000000000000000000000000000000000000000005343cbec9a4d7a0000000000000000000000000000000000000000000000000000000068124125000000000000000000000000000000000000000000000006eaa8bf1b08dc1460000000000000000000000000000000000000000000000006ea83c3d7a2e76000000000000000000000000000000000000000000000000006eabc5ed13c592120000000000000000000000000000000000000000000000000000000000000000231dc8e067fe132b3e5db13ad0afe12a32e4f352138ffc62ec0072fbba8a7968a0d029883ec68233ae9fcb3420d265f08dae4de62e7d2b2a3bcc08eb191b8bdd8000000000000000000000000000000000000000000000000000000000000000208cddadced054eccf7752c3be44d35b84a19dcaacf4a08ad55faeebb570ca88f25958fe41290ba0fa456cd24bac9f7168c6ed2c32b8f6c28b77f4dfeba5ba4d8";
        bytes memory parameterPayload = "";

        // Set the block timestamp after the expiration
        vm.warp(1_745_711_340);

        // Expect revert due to expired data
        vm.expectRevert(ChainlinkPriceFeed.PriceDataInvalid.selector);
        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);
    }

    function testOldPriceUpdate() public {
        bytes memory verifyReportRequest =
            hex"00094bdfff2836d6533428dd204f5864470dc055e6bdd01f34502fe890d5ed260000000000000000000000000000000000000000000000000000000000e30d9b000000000000000000000000000000000000000000000000000000030000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200003d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d60000000000000000000000000000000000000000000000000000000067eab4250000000000000000000000000000000000000000000000000000000067eab42500000000000000000000000000000000000000000000000000009dc652bd7d3a000000000000000000000000000000000000000000000000005343cbec9a4d7a0000000000000000000000000000000000000000000000000000000068124125000000000000000000000000000000000000000000000006eaa8bf1b08dc1460000000000000000000000000000000000000000000000006ea83c3d7a2e76000000000000000000000000000000000000000000000000006eabc5ed13c592120000000000000000000000000000000000000000000000000000000000000000231dc8e067fe132b3e5db13ad0afe12a32e4f352138ffc62ec0072fbba8a7968a0d029883ec68233ae9fcb3420d265f08dae4de62e7d2b2a3bcc08eb191b8bdd8000000000000000000000000000000000000000000000000000000000000000208cddadced054eccf7752c3be44d35b84a19dcaacf4a08ad55faeebb570ca88f25958fe41290ba0fa456cd24bac9f7168c6ed2c32b8f6c28b77f4dfeba5ba4d8";
        bytes memory parameterPayload = "";

        // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_744_415_339);

        // First update to set the initial price
        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);

        // Attempt to update with the same data, expecting a revert due to old price update
        vm.expectRevert(ChainlinkPriceFeed.OldPriceFeedUpdate.selector);
        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);
    }

    function testInvalidReportVersion() public {
        // Define the components of the report
        bytes32 one = 0x0003d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d6;
        bytes32 two = 0x0000000000000000000000000000000000000000000000000000000067e5e3eb;
        bytes32 three = 0x0000000000000000000000000000000000000000000000000000000067e5e3eb;

        // Define the rest of the report data
        uint16 reportVersion = 4; // Incorrect version
        uint32 validFromTimestamp = 1_744_415_339;
        uint32 observationsTimestamp = 1_744_415_340;
        uint32 expiresAt = 1_745_711_340;
        int192 price = 138_121_629_721_886_300_000; // Example price

        // Encode the report data
        bytes memory reportData = abi.encodePacked(
            bytes2(reportVersion), // Encode the version as two bytes
            validFromTimestamp,
            observationsTimestamp,
            expiresAt,
            price
        );

        // Encode the entire verifyReportRequest
        bytes memory verifyReportRequest = abi.encode([one, two, three], reportData);

        // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_744_415_339);

        // Expect revert due to invalid report version
        vm.expectRevert(abi.encodeWithSelector(ChainlinkPriceFeed.InvalidPriceFeedVersion.selector, uint16(4)));
        priceFeed.updatePriceData(verifyReportRequest, "");
    }
}
